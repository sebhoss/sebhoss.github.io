---
layout: flexpost
title: DocBook Publishing with Maven and Eclipse
tags: [DocBook, Maven, Eclipse]
---

p. Writing "DocBook":http://www.docbook.org/ documents always requires one to configure a suitable build system which generates the desired output formats. This post shows how to do that with "Maven":http://maven.apache.org/ all from within "Eclipse":http://eclipse.org/.

h2. Download & Install Eclipse

p. If you have Eclipse not already up and running download it at "http://eclipse.org/downloads/":http://eclipse.org/downloads/ - it does not really matter which version you get or have as we are going to add missing plugins anyway.

h2. Install m2e Plugin

p. The m2e plugin embeds a complete Maven 3 runtime inside Eclipse and thus lets us use all of Mavens features. Since we want to use Maven to generate our documents this plugin comes in handy because we won’t have to switch between Eclipse and a Maven shell all the time. Most Eclipse variants already include this plugin. Check your installation details whether it is already installed.

h2. Install Eclipse XSL Tools (Optional)

p. When you plan on splitting your DocBook files into multiple parts you want to enable XSL support in Eclipse so that it won’t give you any validation errors. To do so install the Eclipse XSL Developer Tools from the main Eclipse repository for your release. I’m currently on the Kepler (4.3) release and therefore it got the XSL tools from the Kepler repository as shown in the following picture:

!/images/docbook-publishing/install-xsl-plugin.png(XSL Plugin Installation)!


h2. Creating a project

p. At this point we have all necessary tools for DocBook editing and publishing using Maven and Eclipse. To start writing you can now either create a new Maven project inside your Eclipse workspace using the "docbkx":https://code.google.com/p/docbkx-tools/ "archetype":https://code.google.com/p/docbkx-tools/wiki/UsingArchetypeTemplate or just a simple Maven project without the use of any archetype. Both ways will result in a _pom.xml_ file which is the main configuration file for your project and the place to configure PDF output, etc. For this post I’ve started with the archetype project layout but modified it to better reflect the standard Maven layout. Use _New > Other > New Maven Project_. Then select the docbkx archetype and set your groupId and artifactId as shown below:

!/images/docbook-publishing/archetype-selection.png(New Maven project inside Eclipse using the archetype selection wizard)!

!/images/docbook-publishing/archetype-parameters.png(Setting archetype parameters)!

The end result looks as follows:

!/images/docbook-publishing/sample-docbook-project-layout.png(Project Layout)!


p. Have a look at the finished "pom.xml":https://github.com/sebhoss/maven-docbook-sample/blob/master/pom.xml. It includes a dependency to _net.sf.docbook:docbook-xml:5.0-all_ which contains the XML Schema files for DocBook.


h2. Enabling Validation

p. As you can see, all DocBook sources are inside the _src/main/docbkx_ folder and will get automatically picked-up by the docbkx-plugin. Also note that I’ve changed the file extension of all the DocBook files to _.dbk_ which is the default file extension of DocBook files. The files inside the docbook-xml dependency will now be used to validate your sources and provide you with content assist. For that open the Eclipse preferences via _Preferences > XML > XML Catalog_ category as shown in the following picture.

!/images/docbook-publishing/editing-xml-catalog.png(Adding DocBook to the XML Catalog)!

p. The location points to the local Maven repository at _~/.m2/_ but *you have to URI escape to dot to _%2E_ for this to work*. The complete location link is as follows:

_jar:file:~/%2Em2/repository/net/sf/docbook/docbook-xml/5.0-all/docbook-xml-5.0-all-resources.zip!/docbook/xsd/docbook.xsd_

p. or specifically in my case (on OSX):

_jar:file:/Users/seb/%2Em2/repository/net/sf/docbook/docbook-xml/5.0-all/docbook-xml-5.0-all-resources.zip!/docbook/xsd/docbook.xsd_

p. If you want to use "XIncludes":http://www.w3.org/TR/xinclude/ (useful if you want to split content across several files) as well you have to enable the “Process XML Inclusions” checkbox inside the _XML > XML Files > Validation_ category as shown below.

!/images/docbook-publishing/enabling-xinclude.png(Enable XInclude processing)!

p. At this point we are almost there but we still need to enable the actual validation. For this right-click on your project, select _Properties_ and switch to the _Validation_ category. There add a validation builder to your project and click on the XML validator settings as shown in the following picture.

!/images/docbook-publishing/enabling-validation.png(Enable XML validation)!

p. Inside the XML validator settings click on the first include group (or create your own) and add a single rule to include files with a DocBook content-type. The DocBook content-type is already configured in the latest versions of Eclipse so no additional work needed. The result should look like the following:


h2. Generating Output

p. At this point all validation of DocBook sources works and you have content assist inside those sources. To finally generate some output we are going to create a simple launch configuration with Eclipse which will call Maven to build your project. For that just right-click on your project, select _Run As > Maven build…_ and set the goal to _clean pre-site_ as shown in the following picture.



p. Now hit Run, wait for the process to finish and look into the target folder of your project for final outputs.

p. The nice thing about this setup is that it can be easily shared via SCM-systems. It only includes source files with the exception of the FO stylesheet. But those could be easily moved into separate projects, modules, plugins or just a network drive to make them accessible for all writers within a team.

p. (For the impatient I’ve created a "sample project on github":https://github.com/sebhoss/maven-docbook-sample which includes all necessary files)
